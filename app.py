# --------------------- IMPORTS ---------------------

import streamlit as st # Framework pour cr√©er des applications web interactives
import pandas as pd # Biblioth√®que pour manipuler des donn√©es tabulaires
import geopandas as gpd
import folium #carte
from streamlit_folium import st_folium #carte
from streamlit.components.v1 import html #insertion excel online
import html as html2 
import io # export de donnees 
import os #chemin relatif des fichiers
from pathlib import Path

# --------------------- FONCTIONS ---------------------

# Fonction pour traduire les statuts cod√©s en libell√©s compr√©hensibles
def traduire_statut(statut):
    traductions = {
            "VU": "Vuln√©rable",
            "EN": "En danger",
            "CR": "En danger critique",
            "NT": "Quasi menac√©",
            "LC": "Pr√©occupation mineure",
            "DD": "Donn√©es insuffisantes",
            "RE": "√âteint r√©gionalement",
            "NA": "Non applicable (Non indig√®ne ou donn√©es occasionnelles)",
            "NE": "Non √©valu√©",
            "DH IV": "Directive Habitats, Faune, Flore - Annexe IV",
            "DH II&IV": "Directive Habitats, Faune, Flore - Annexe II & IV",
            "DO I": "Directive Oiseaux - Annexe I",
            "N.C." : "Non Concern√©",
            "PRA en cours" : "Plan r√©gional d'action en cours",
            "PNA en cours" : "Plan national d'action en cours",
            "PRA en pr√©paration" : "Plan r√©gional d'action en pr√©paration",
            "PNA en pr√©paration" : "Plan national d'action en pr√©paration",
            "PNG en cours" : "Plan national de gestion en cours",
            "PRA en cours + PNA en pr√©paration" : "Plan r√©gional d'action en cours + Plan national d'action en pr√©paration"}
                    
    return traductions.get(statut, statut) # Retourne le statut traduit ou le statut d'origine si non trouv√©            


# Fonction pour obtenir une couleur en fonction de l‚Äôindice de priorit√© de conservation
def get_conservation_color(index):
    colors = {
        1: '#FFFFFF',  # blanc
        2: '#FDE9EA',  # rouge tr√®s p√¢le
        3: '#FFB7B7',  # rose pastel
        4: '#FF797C',  # rouge moyen doux
        5: '#FF0000',  # rouge profond
    }
    return colors.get(index, '#ffffff')  # Blanc par d√©faut si l‚Äôindice est inconnu


# Fonction pour obtenir une couleur en fonction de l‚Äôindice de priorit√© r√©glementaire
def get_reglementaire_color(index):
    colors = {
        0: '#FFFFFF',  # blanc
        1: '#FDE9EA',  # rouge tr√®s p√¢le
        2: '#FFB7B7',  # rose pastel
        3: '#FF797C',  # rouge moyen doux
        4: '#FF0000',  # rouge profond
    }
    return colors.get(index, '#ffffff') # Blanc par d√©faut si l‚Äôindice est inconnu


# Fonction de reset global
def reset_all():
    st.session_state.selected_foret = None
    st.session_state.selected_parcelle = None
    st.session_state.view = "start"
    st.session_state.reset_requested = True

# Dictionnaire des couleurs de point de la carte par niveau de priorit√© conservation
couleurs = {
    1: "#00B050",   # vert fonc√©
    2: "#92D050",   # vert clair
    3: "#FFFF00",   # jaune
    4: "#FF9900",   # orange
    5: "#FF0000",   # rouge
    "default": "#D3D3D3"  # gris clair
}

# D√©termination de la couleur du point de la carte d'apr√®s les indices
def get_couleur_personnalisee(row):
    c = row["Indice_priorit√©_conservation"]
    r = row["Indice_priorit√©_r√©glementaire"]

    try:
        if c == 5 or r == 4:
            return couleurs[5]
        elif c == 4 or r == 3:
            return couleurs[4]
        elif c == 3 or r == 2:
            return couleurs[3]
        elif c == 2 or r == 1:
            return couleurs[2]
        elif c == 1 or r == 0:
            return couleurs[1]
        else:
            return couleurs["default"]
    except:
        return couleurs["default"]

#Pour enlever s√©curiser l'affichage des popus qui sinon peuvent faire bugger la carte
def safe_get(val):
    if pd.isna(val) or val in ["nan", "NaN", None]:
        return ""
    # Convertit en texte, √©chappe les caract√®res sp√©ciaux HTML
    val_str = str(val)
    val_str = html2.escape(val_str)  # √©chappe &, <, >, ", '
    val_str = val_str.replace("\n", "<br>")  # gestion des retours √† la ligne
    return val_str

# Fonction d'affichage des cartes
def afficher_carte(df, df_reference, titre="üìç Localisation des esp√®ces "):
    if df.empty:
        st.warning("Aucune donn√©e √† afficher pour cette s√©lection.")
        return

    # Fusion avec la table de r√©f√©rence via CD_NOM
    df = df.rename(columns={"Code taxon (cd_nom)": "CD_NOM"})
    df_popup = df.merge(
        df_reference[["CD_NOM", "Indice_priorit√©_conservation", "Indice_priorit√©_r√©glementaire"]],
        on="CD_NOM", how="left"
    )

    # Colonnes √† afficher
    colonnes_a_afficher = ['For√™t', 'CD_NOM', 'Date d√©but', 'Esp√®ce', 'Commentaire du relev√©', 'Commentaire de la localisation', "Commentaire de l'observation", 'Parcelle de for√™t', 'Surface de la g√©om√©trie', 'Coordonn√©e 1', 'Coordonn√©e 2', 'Syst√®me de coordonn√©es', 'Observateur(s)', "Fiabilit√© de l'observation", "Statut juridique"]
    
    df_fusion = df[colonnes_a_afficher].merge(
        df_reference[["CD_NOM"]],
        on="CD_NOM", how="left"
    )

    # Fusion compl√®te pour export
    colonnes_reference = [
        "Cat_naturaliste", "Nom_scientifique_valide", "LR_nat", "LR_reg",
        "Indice_priorit√©_conservation",
        "Directives_euro", "Plan_action", "Arr√™t√©_protection_nationale", "Arr√™t√©_protection_BN",
        "Arr√™t√©_protection_HN", "Article_arr√™t√©", "Type_protection", "Conseils_gestion"
    ]

    df_export = df_fusion.merge(
        df_reference[["CD_NOM"] + colonnes_reference],
        on="CD_NOM", how="left"
    )

    # Astuce CSS pour limiter la hauteur au chargement
    st.markdown("""
        <style>
            .folium-map {
                max-height: 650px;
                overflow: hidden;
            }
        </style>
    """, unsafe_allow_html=True)

    # Calcul du centre de la carte
    lat_centre = df["Coordonn√©e 2"].mean()
    lon_centre = df["Coordonn√©e 1"].mean()

    # Cr√©ation de la carte Folium
    m = folium.Map(location=[lat_centre, lon_centre], zoom_start=13, control_scale=True)

    # Ajout du fond de carte cadastre (WMS IGN)
    folium.raster_layers.WmsTileLayer(
        url="https://data.geopf.fr/wms-r/wms",
        layers="CADASTRALPARCELS.PARCELLAIRE_EXPRESS",
        name="Cadastre",
        fmt="image/png",
        transparent=True,
        version="1.3.0",
        overlay=True,
        control=True
    ).add_to(m)

    # Ajout des points naturalistes
    for _, row in df_popup.iterrows():
        if pd.notna(row["Coordonn√©e 1"]) and pd.notna(row["Coordonn√©e 2"]):
            couleur = get_couleur_personnalisee(row)

            popup = f"""<b>Parcelle :</b> {safe_get(row.get('Parcelle de for√™t'))}<br>
            <b>Esp√®ce :</b> {safe_get(row.get('Esp√®ce'))}<br>
            <b>Commentaire de la localisation :</b> {safe_get(row.get('Commentaire de la localisation'))}<br>
            <b>Commentaire de l'observation :</b> {safe_get(row.get("Commentaire de l'observation"))}<br>
            <b>Commentaire du relev√© :</b> {safe_get(row.get("Commentaire du relev√©"))}<br>
            <b>Date d'observation :</b> {safe_get(row.get("Date de d√©but"))}<br>
            <b>Surface de la g√©om√©trie : </b> {row["Surface de la g√©om√©trie"]}<br>
            <b>Syst√®me de coordonn√©es :</b> {safe_get(row.get("Syst√®me de coordonn√©es"))}<br>
            """

            folium.CircleMarker(
                location=[row["Coordonn√©e 2"], row["Coordonn√©e 1"]],
                radius=6,
                color="black",
                weight=1,
                fill=True,
                fill_color=couleur,
                fill_opacity=1,
                popup=folium.Popup(popup, max_width=500)
            ).add_to(m)

    # Contr√¥le de couches
    folium.LayerControl().add_to(m)

    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
        df_notice.to_excel(writer, sheet_name="Notice", index=False)
        df_export.to_excel(writer, sheet_name="Export am√©nagement", index=False)

    # Affichage dans Streamlit
    with st.container():
        st.markdown(f"### {titre}")
        col1, col2 = st.columns([5.5, 1.5])  # Large l√©gende √† gauche, petit bouton √† droite

        with col1:
            st.markdown("""
            <div style="
                background-color: white;
                border: 1px solid black;
                border-radius: 10px;
                padding: 12px 24px;
                box-shadow: 3px 3px 6px rgba(0, 0, 0, 0.1);
                display: flex;
                flex-wrap: nowrap;
                align-items: center;
                gap: 24px;
                font-size: 14px;
                overflow-x: auto;
            ">
                <div style="display: flex; align-items: center;">
                    <span style="width:14px; height:14px; background-color:#FF0000; border-radius:50%; margin-right:6px; display:inline-block;"></span>
                    Enjeu potentiellement majeur
                </div>
                <div style="display: flex; align-items: center;">
                    <span style="width:14px; height:14px; background-color:#FF9900; border-radius:50%; margin-right:6px; display:inline-block;"></span>
                    Enjeu potentiellement fort
                </div>
                <div style="display: flex; align-items: center;">
                    <span style="width:14px; height:14px; background-color:#FFFF00; border-radius:50%; margin-right:6px; display:inline-block;"></span>
                    Enjeu potentiellement √©lev√©
                </div>
                <div style="display: flex; align-items: center;">
                    <span style="width:14px; height:14px; background-color:#92D050; border-radius:50%; margin-right:6px; display:inline-block;"></span>
                    Enjeu mod√©r√©
                </div>
                <div style="display: flex; align-items: center;">
                    <span style="width:14px; height:14px; background-color:#00B050; border-radius:50%; margin-right:6px; display:inline-block;"></span>
                    Enjeu faible
                </div>
                <div style="display: flex; align-items: center;">
                    <span style="width:14px; height:14px; background-color:#D3D3D3; border-radius:50%; margin-right:6px; display:inline-block;"></span>
                    Enjeu inconnu
                </div>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.download_button(
                label="üì• Export am√©nagement",
                data=buffer.getvalue(),
                file_name="export_amenagement.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                key="download_xlsx_amenagement"
            )

        st_folium(m, height=600, returned_objects=[], use_container_width=True)


# Fonction d'affichage des statuts et prescriptions
def afficher_statuts_prescriptions(df_filtr√©, df_reference):
    if df_filtr√©.empty:
        st.warning("Aucune esp√®ce √† afficher pour cette s√©lection.")
        return

    # Colonnes √† afficher
    colonnes_a_afficher = ['For√™t', 'Code taxon (cd_nom)', 'Date d√©but', 'Esp√®ce', 'Commentaire du relev√©', 'Commentaire de la localisation', "Commentaire de l'observation", 'Parcelle de for√™t', 'Surface de la g√©om√©trie', 'Coordonn√©e 1', 'Coordonn√©e 2', 'Syst√®me de coordonn√©es', 'Observateur(s)', "Fiabilit√© de l'observation", "Statut juridique"]

    st.dataframe(df_filtr√©[colonnes_a_afficher])

    # Cr√©ation d‚Äôun mapping lisible : {cd_nom: "Esp√®ce"}
    df_temp = df_filtr√©[['Code taxon (cd_nom)', 'Esp√®ce']].dropna()
    df_temp['Esp√®ce'] = df_temp['Esp√®ce'].astype(str).str.strip()
    df_temp['Code taxon (cd_nom)'] = df_temp['Code taxon (cd_nom)'].astype(str).str.strip()

    species_dict = dict(zip(df_temp['Code taxon (cd_nom)'], df_temp['Esp√®ce']))
    reverse_dict = {v: k for k, v in species_dict.items()}

    # Affichage des esp√®ces comme options dans la selectbox
    selected_label = st.selectbox("üîé Choisissez une esp√®ce :", sorted(species_dict.values()))

    # On r√©cup√®re le cd_nom correspondant au nom d‚Äôesp√®ce s√©lectionn√©
    selected_species = reverse_dict.get(selected_label)

    # Injecter du CSS personnalis√© pour modifier l'apparence des expanders
    st.markdown("""
        <style>
        /* Style de l'expander ONF compact */
        details {
            background-color: #DDEEDD;
            border: none;
        }
        </style>
    """, unsafe_allow_html=True)


    if selected_species:
        selected_species = str(selected_species).strip()
        df_reference['CD_NOM'] = df_reference['CD_NOM'].astype(str).str.strip()
        species_reference_info = df_reference[df_reference['CD_NOM'] == selected_species]
        st.markdown("")
        st.subheader(f"üìò Statuts et prescriptions : {selected_label}")

        if not species_reference_info.empty and pd.notna(species_reference_info['R√¥le_TFT'].iloc[0]) and str(species_reference_info['R√¥le_TFT'].iloc[0]).strip():
            nom_sci = species_reference_info['Nom_scientifique_valide'].iloc[0]

            st.markdown(f"**Nom scientifique :** {nom_sci}")
            st.markdown(f"**Nom vernaculaire :** {species_reference_info['Nom_vernaculaire'].iloc[0]}")
            st.markdown(f"**Cat√©gorie naturaliste :** {species_reference_info['Cat_naturaliste'].iloc[0]}")

            conserv_index = species_reference_info['Indice_priorit√©_conservation'].iloc[0]
            color = get_conservation_color(conserv_index)
            st.markdown(f"""<div style='background-color: {color}; padding: 6px 12px; border-radius: 8px; font-size: 20px; display: inline-block;'><b>Priorit√© de conservation* :</b> {conserv_index}</div>""", unsafe_allow_html=True)

            reg_index = species_reference_info['Indice_priorit√©_r√©glementaire'].iloc[0]
            color_reg = get_reglementaire_color(reg_index)
            st.markdown(f"""<div style='background-color: {color_reg}; padding: 6px 12px; border-radius: 8px; font-size: 20px; display: inline-block;'><b>Priorit√© r√©glementaire* :</b> {reg_index}</div>""", unsafe_allow_html=True)

            st.markdown ("---")
            st.markdown(f"**Code unique clause :** {species_reference_info['Code_unique'].iloc[0]}")
            st.markdown(f"**Condition d'application de la clause :** {species_reference_info['Condition(s)_application_clause'].iloc[0]}")

            st.markdown(f"**R√¥le du TFT :** {species_reference_info['R√¥le_TFT'].iloc[0]}")

            with st.expander("üìã Libell√© des clauses √† inscrire"):
                st.write(f"**Fiche chantier (TECK) :** {species_reference_info['Libell√©_fiche_chantier_ONF (TECK)'].iloc[0]}")
                st.write(f"**Fiche d√©signation (DESIGNATION MOBILE) :** {species_reference_info['Libell√©_fiche_d√©signation_ONF (DESIGNATION MOBILE)'].iloc[0]}")
                st.write(f"**Fiche vente (PRODUCTION BOIS) :** {species_reference_info['Libell√©_fiche_vente_ONF (PRODUCTION BOIS)'].iloc[0]}")


            st.markdown ("---")
            with st.expander("*L√©gende des indices de priorit√©"):
                st.markdown("""
                **Indice de priorit√© de conservation** :
                - `5` : Priorit√© de conservation cruciale
                - `4` : Priorit√© de conservation majeure 
                - `3` : Priorit√© de conservation forte
                - `2` : Priorit√© de conservation significative
                - `1` : Priorit√© de conservation mod√©r√©e

                **Indice de priorit√© r√©glementaire** :
                - `4` : Risque r√©glementaire majeur (Esp√®ce r√©glement√©e au niveau europ√©en + national ou r√©gional) si les interventions foresti√®res impactent les sp√©cimens OU les √©l√©ments n√©cessaires au bon fonctionnement de leur cycle biologique (site de reproduction, site de repos, source de nourriture etc.).
                - `3` : Risque r√©glementaire √©lev√© (Esp√®ce r√©glement√©e au niveau national ou r√©gional) si les interventions foresti√®res impactent les sp√©cimens OU les √©l√©ments n√©cessaires au bon fonctionnement de leur cycle biologique (site de reproduction, site de repos, source de nourriture etc.).
                - `2` : Risque r√©glementaire uniquement si les interventions foresti√®res impactent les sp√©cimens.
                - `1` : La gestion foresti√®re courante de l'ONF suffit √† conserver le bon √©tat des populations de l'esp√®ce √† l'√©chelle du massif.
                - `0` : Esp√®ce non prot√©g√©e.
                """)

            respo_dict = {1: "Faible", 2: "Mod√©r√©e", 3: "Significative", 4: "Forte", 5: "Majeure"}
            valeur_respo = species_reference_info['Respo_reg'].iloc[0]
            texte_respo = respo_dict.get(valeur_respo, "Non Renseign√©")

            with st.expander("üìò D√©tail des statuts"):
                st.write(f"**Liste rouge r√©gionale :** {traduire_statut(species_reference_info['LR_reg'].iloc[0])}")
                st.write(f"**Liste rouge nationale :** {traduire_statut(species_reference_info['LR_nat'].iloc[0])}")
                st.write(f"**Responsabilit√© r√©gionale :** {texte_respo}")
                st.write(f"**Directives europ√©ennes :** {traduire_statut(species_reference_info['Directives_euro'].iloc[0])}")
                st.write(f"**Plan d'action :** {traduire_statut(species_reference_info['Plan_action'].iloc[0])}")
                # R√©cup√©ration des 3 colonnes concern√©es
                apn = species_reference_info['Arr√™t√©_protection_nationale'].iloc[0]
                ap_bn = species_reference_info['Arr√™t√©_protection_BN'].iloc[0]
                ap_hn = species_reference_info['Arr√™t√©_protection_HN'].iloc[0]

                # On filtre uniquement les valeurs diff√©rentes de "N.C."
                valeurs_protection = [apn, ap_bn, ap_hn]
                valeurs_non_nc = [v for v in valeurs_protection if str(v).strip() != "N.C."]

                # Affichage
                if valeurs_non_nc:
                    st.write(f"**Arr√™t√© de protection :** {', '.join(valeurs_non_nc)}")
                else:
                    st.write("**Arr√™t√© de protection :** Non Concern√©")
                st.write(f"**Article de l'arr√™t√© :** {traduire_statut(species_reference_info['Article_arr√™t√©'].iloc[0])}")
            
            with st.expander("‚ûï Pour aller plus loin"):
                contenu = species_reference_info['Conseils_gestion'].iloc[0]
                if pd.notna(contenu) and contenu != "":
                    st.markdown(f"{contenu}")
                else:
                    st.markdown("")

        else:
            st.info("‚ùå Cette esp√®ce ne fait pas l'objet de prescription environnementale.")


# --------------------- CONFIGURATION ---------------------

# D√©finition de la configuration de la page Streamlit
st.set_page_config(page_title="Esp√®ces remarquables et prescriptions", page_icon="ü¶ã", layout="wide")


# --------------------- AUTHENTIFICATION --------------

# D√©finir un mot de passe correct
PASSWORD = "caprimulgus"

# Initialiser une session pour suivre l'√©tat de l'utilisateur
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False

# --------------------- BANDEAU FIXE ---------------------

# Ajouter du CSS pour un bandeau fixe en haut de l'√©cran
st.markdown("""
    <style>
        .header-banner {
            background-color: rgba(220, 220, 220, 0.9); /* Gris clair avec transparence */
            color: black;  /* Texte noir */
            padding: 6px 10px;
            text-align: center;
            font-size: 18px;
            font-weight: 500;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            z-index: 999999;
    </style>
""", unsafe_allow_html=True)

# HTML pour le bandeau
st.markdown("""
    <div class="header-banner">
        <i>OUTIL EN COURS DE DEVELOPPEMENT --  --  --  SEAP ONF NORMANDIE</i>
    </div>
""", unsafe_allow_html=True)


# ------------------------INTERFACE--------------------------


# Si l'utilisateur n'est pas encore connect√©
if not st.session_state.authenticated:
    import base64

    # Charger l'image locale et l'encoder en base64
    
    file_path = Path(__file__).parent / "logo ONF.png"

    with open(file_path, "rb") as f:
        data = f.read()
        encoded = base64.b64encode(data).decode()

    # Afficher l'image centr√©e via HTML
    st.markdown(
        f"""
        <div style="text-align: center;">
            <img src="data:image/png;base64,{encoded}" width="250">
            <br><br>
        </div>
        """,
        unsafe_allow_html=True
    )


    with st.form("login_form"):
        st.write("### ü¶ã Esp√®ces remarquables et prescriptions")
        password_input = st.text_input("Mot de passe", type="password")
        submitted = st.form_submit_button("Se connecter")

        if submitted:
            if password_input == PASSWORD:
                st.session_state.authenticated = True
                st.rerun() # recharge la page pour cacher le formulaire
            else:
                st.error("Mot de passe incorrect.")

# Si l'utilisateur est connect√©
if st.session_state.authenticated:

    # Insertion du logo et configuration de la barre lat√©rale
    file_path = Path(__file__).parent / "logo ONF.png"
    st.sidebar.image(file_path, width=250)
    st.sidebar.title("Navigation")

    st.sidebar.markdown("<div style='font-size:20px;'>Aller √† :</div>", unsafe_allow_html=True)

    # Application d'un style personnalis√© aux composants pour agrandir les polices
    st.markdown("""
                            <style>
                    div.stMarkdown p, div.stDataFrame, div.stSelectbox, div.stExpander, div[data-testid="stVerticalBlock"] {
                        font-size: 20px !important;
                    }
                    div[data-testid="stMarkdownContainer"] {
                        font-size: 20px !important;
                    }
                </style>
            """, unsafe_allow_html=True)


    # Cr√©ation d‚Äôun menu de navigation lat√©ral
    page = st.sidebar.radio("Aller √† :",["Accueil", "Recherche par for√™t", "Recherche par esp√®ce", "R√©f√©rentiel"], label_visibility="collapsed")


    # --------------------- CHARGEMENT DES DONN√âES ---------------------

    # Chargement du fichier principal contenant les observations de la Base de donn√©es naturalistes de l'ONF
    @st.cache_data
    def load_data():
        file_path = Path(__file__).parent / "MonExportBdn.xlsx"
        return pd.read_excel(file_path)

    # Chargement de la liste des codes CD_NOM autoris√©s (filtrage pour avoir uniquement les esp√®ces du tableau de m√©tadonn√©es des esp√®ces remarquables)
    @st.cache_data
    def load_codes_autorises():
        file_path = Path(__file__).parent / "Metadonnees.xlsx"
        df_codes = pd.read_excel(file_path)
        return df_codes['CD_NOM'].astype(str).str.strip().tolist()

    # Chargement du fichier de r√©f√©rence des esp√®ces avec leurs m√©tadonn√©es
    @st.cache_data
    def load_reference_especes():
        file_path = Path(__file__).parent / "Metadonnees.xlsx"
        df_reference = pd.read_excel(file_path)
        return df_reference

    # Chargement de la notice de l'export am√©nagement
    @st.cache_data
    def load_notice():
        file_path = Path(__file__).parent / "Notice_export.xlsx"
        return pd.read_excel(file_path)

    # Ex√©cution des fonctions de chargement
    df = load_data()
    codes_autorises = load_codes_autorises()
    df_reference = load_reference_especes()
    df_notice = load_notice()

    # Nettoyage des colonnes pour garantir l'uniformit√© des CD_NOM
    df_reference['CD_NOM'] = df_reference['CD_NOM'].astype(str).str.strip()
    df["Code taxon (cd_nom)"] = df["Code taxon (cd_nom)"].astype(str).str.split(',')
    df = df.explode("Code taxon (cd_nom)").copy() # Une ligne par taxon si plusieurs dans une m√™me cellule
    df["Code taxon (cd_nom)"] = df["Code taxon (cd_nom)"].str.strip()
    df = df[df["Code taxon (cd_nom)"].isin(codes_autorises)] # Filtrage uniquement sur les esp√®ces autoris√©es
    forets = df['For√™t'].dropna().unique() # Liste des for√™ts sans doublons ni NaN


    # --------------------- PAGE ACCUEIL ---------------------

    if page == "Accueil":
        st.title("ü¶ã Esp√®ces remarquables et prescriptions") # Affichage d‚Äôun titre en haut de la page d'accueil
        
        # Texte de pr√©sentation
        st.markdown("""
        <div style='font-size:22px'>
            <br><br>        
            Bienvenue dans l'outil de consultation des donn√©es d'esp√®ces remarquables par for√™t avec les prescriptions environnementales associ√©es.
            <br><br>
            Une esp√®ce est consid√©r√©e remarquable si elle poss√®de au moins un des statuts suivants :
            <ul>
                <li>Esp√®ce prot√©g√©e par arr√™t√© national ou r√©gional ;</li>
                <li>Esp√®ce r√©glement√©e au niveau europ√©en par les directives Oiseaux (Annexe I) ou Habitats, Faune, Flore (Annexe II & IV) ;</li>
                <li>Esp√®ce menac√©e sur la liste rouge r√©gionale normande ou sur la liste rouge nationale (Statut "Vuln√©rable = VU", "En danger = EN" ou "En danger critique = CR") ;</li>
                <li>Esp√®ce faisant l'objet d'un plan national d'action en faveur des esp√®ces menac√©es ;</li>
                <li>Esp√®ce faisant l'objet d'une clause environnementale de l'ONF (9200-15-GUI-SAM-052).</li>
            </ul>
            <br>
            Les esp√®ces ont √©t√© hi√©rarchis√©es selon deux indices, un indice de priorit√© de conservation et un indice de priorit√© r√©glementaire. 
            <br><br>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div style="
            background-color: rgba(255, 0, 0, 0.1);
            padding: 1.5rem;
            border-radius: 10px;
            border: 1px solid rgba(255, 0, 0, 0.3);
            font-size: 22px;
            line-height: 1.6;
            ">
            <i>L'indice de <b>priorit√© de conservation</b> int√®gre la menace d'extinction au niveau r√©gional et national, ainsi que la responsabilit√© de la Normandie dans la conservation de l'esp√®ce. La m√©thode utilis√©e pour calculer cet indice se base sur les travaux de Barneix et Gigot (2013) et sur les initiatives de hi√©rarchisation qui ont d√©coul√© de ces travaux √† l'√©chelle des r√©gions fran√ßaises.</i>
            <br><br>
            <i>L'indice de <b>priorit√© r√©glementaire</b> int√®gre les diff√©rents types de r√©glementation (Directives europ√©ennes, protection par arret√©) et les subtilit√©s d'interpr√©tation des articles d'arr√™t√©s. En effet, certains articles prot√®gent uniquement les sp√©cimens et d'autres articles prot√®gent, en plus des sp√©cimens, les √©l√©ments n√©cessaires au bon fonctionnement du cycle biologique de l'esp√®ce, incluant notamment les sites de reproduction et de repos. Enfin, cet indice prend en compte le risque que l'ONF entrave ces r√©glementations. En effet, pour certaines esp√®ces tr√®s communes comme la m√©sange bleue, le risque r√©glementaire est tr√®s faible √©tant donn√© que la conservation de l'esp√®ce √† l'√©chelle du massif est assur√©e par la gestion classique de l'ONF.</i>
        </div>
        """, unsafe_allow_html=True)

        st.markdown("""
        <div style='font-size:22px'>
            <br>
            Ces deux indices permettront de hi√©rarchiser les enjeux et de prioriser les clauses environnementales.
            <br><br>
            ‚¨ÖÔ∏è Utilisez le menu √† gauche pour consulter les esp√®ces remarquables pr√©sentes en for√™t et acc√©der aux statuts et prescriptions.
        </div>
        """, unsafe_allow_html=True)
        
    # --------------------- PAGE FOR√äT ---------------------


    if page == "Recherche par for√™t":
        st.markdown("### üîé Recherche par for√™t")
        if 'selected_foret' not in st.session_state:
            st.session_state.selected_foret = None
        if 'selected_parcelle' not in st.session_state:
            st.session_state.selected_parcelle = None
        if "view" not in st.session_state:
            st.session_state.view = 'start'
        if st.session_state.get("first_load", True):
            st.session_state.first_load = False
            st.rerun()

        # S√©lection de la for√™t
        if st.session_state.selected_foret is None:
            selected_foret = st.selectbox("S√©lectionnez une for√™tüå≤:", [""] + sorted(forets))
            if selected_foret:
                st.session_state.selected_foret = selected_foret
                st.session_state.view = "forest_view"
                st.rerun()

        # Vue for√™t s√©lectionn√©e
        elif st.session_state.view == "forest_view":
            foret = st.session_state.selected_foret
            df_foret = df[df['For√™t'] == foret]
            
            with st.container ():
                if st.button("üìå Filtrer par parcelle"):
                    st.session_state.view = "parcelle_view"
                    st.rerun()
                if st.button("üìò Voir les statuts et prescriptions des esp√®ces remarquables de la for√™t"):
                    st.session_state.view = "species_forest"
                    st.rerun()
                st.button("‚¨ÖÔ∏è Retour √† la liste des for√™ts", on_click=lambda: st.session_state.update({"view": "start","selected_foret": None}))

            afficher_carte(df_foret, df_reference, titre=f"üìç Carte des esp√®ces remarquables de la for√™t {foret}")

        # Vue filtre par parcelle
        elif st.session_state.view == "parcelle_view":
            foret = st.session_state.selected_foret
            df_foret = df[df['For√™t'] == foret]
            parcelles_dispo = sorted(df_foret["Parcelle de for√™t"].unique())

            # D√©finir la parcelle par d√©faut (si connue) OU forcer √† "" sinon
            if st.session_state.selected_parcelle in parcelles_dispo:
                default_index = parcelles_dispo.index(st.session_state.selected_parcelle)
                selected_parcelle = st.selectbox("üìå Choisissez une parcelle :", parcelles_dispo, index=default_index)
            else:
                selected_parcelle = st.selectbox("üìå Choisissez une parcelle :", [""] + parcelles_dispo)
                
            if selected_parcelle:
                st.session_state.selected_parcelle = selected_parcelle
                df_parcelle = df_foret[df_foret["Parcelle de for√™t"] == selected_parcelle]

                if st.button("üìò Voir les statuts et prescriptions des esp√®ces remarquables de la parcelle"):
                    st.session_state.view = "species_parcelle"
                    st.rerun()

                if st.button("‚¨ÖÔ∏è Retour √† la carte de la for√™t"):
                    st.session_state.update({"view": "forest_view", "selected_parcelle": None})

                afficher_carte(df_parcelle, df_reference, titre=f"üìç Esp√®ces remarquables dans la parcelle {selected_parcelle}")
            
        # Statuts et prescriptions for√™t
        elif st.session_state.view == "species_forest":
            st.button("‚¨ÖÔ∏è Retour √† la carte de la for√™t", on_click=lambda: st.session_state.update({"view": "forest_view"}))

            st.markdown (f" ### D√©tails des esp√®ces remarquables pour la for√™t : {st.session_state.selected_foret}")
            df_filtr√© = df[df['For√™t'] == st.session_state.selected_foret]
            afficher_statuts_prescriptions(df_filtr√©, df_reference)

        # Statuts et prescriptions parcelle
        elif st.session_state.view == "species_parcelle":
            st.button("‚¨ÖÔ∏è Retour √† la carte de la parcelle", on_click=lambda: st.session_state.update({"view": "parcelle_view", "selected_parcelle":st.session_state.selected_parcelle}))
            
            st.button("‚¨ÖÔ∏è Retour √† la carte de la for√™t", on_click=lambda: st.session_state.update({"view": "forest_view"}))
            
            st.markdown (f" ### D√©tails des esp√®ces remarquables pour la parcelle : {st.session_state.selected_parcelle}")
            df_filtr√© = df[
                (df['For√™t'] == st.session_state.selected_foret) &
                (df['Parcelle de for√™t'] == st.session_state.selected_parcelle)
            ]
            afficher_statuts_prescriptions(df_filtr√©, df_reference)

    if st.session_state.get("reset_requested"):
        st.session_state.reset_requested = False
        st.rerun()


    # --------------------- PAGE ESPECES ---------------------

    elif page == "Recherche par esp√®ce" :
        st.markdown("### üîé Recherche par esp√®ce")
        st.markdown(
        "<div style='font-size:20px;'>"
        "Entrez un code CD_NOM :"
        "</div>",
        unsafe_allow_html=True
        )
        search_cd_nom = st.text_input(label=" ", label_visibility="collapsed")

        st.markdown("""
        <div style='font-size:20px'>
        Si vous connaissez uniquement le nom de l'esp√®ce, tapez-le dans la barre de recherche du site de l'INPN pour obtenir le CD_NOM : <a href='https://inpn.mnhn.fr/accueil/index' target='_blank'>inpn.mnhn.fr</a>
        </div>
        """, unsafe_allow_html=True)

        file_path = Path(__file__).parent / "inpn_ex.png"

        st.image(file_path, use_container_width=True)

        if search_cd_nom:
            search_cd_nom = search_cd_nom.strip()
            st.markdown("""
                <style>
                    div.stMarkdown p, div.stDataFrame, div.stSelectbox, div.stExpander, div[data-testid="stVerticalBlock"] {
                        font-size: 20px !important;
                    }
                    div[data-testid="stMarkdownContainer"] {
                        font-size: 20px !important;
                    }
                </style>
            """, unsafe_allow_html=True)
            match = df_reference[df_reference['CD_NOM'] == search_cd_nom]

            # Injecter du CSS personnalis√© pour modifier l'apparence des expanders
            st.markdown("""
                <style>
                /* Style de l'expander ONF compact */
                details {
                    background-color: #DDEEDD;
                    border: none;
                }
                </style>
            """, unsafe_allow_html=True)

            st.subheader(f"üìò Statuts et prescriptions : {search_cd_nom}")

            if not match.empty and str(match['R√¥le_TFT'].iloc[0]).strip().upper() != "N.C.":
                with st.container():
                    st.markdown(f"**Nom scientifique :** {match['Nom_scientifique_valide'].iloc[0]}")
                    st.markdown(f"**Nom vernaculaire :** {match['Nom_vernaculaire'].iloc[0]}")
                    st.markdown(f"**Cat√©gorie naturaliste :** {match['Cat_naturaliste'].iloc[0]}")
                    
                    conserv_index = match['Indice_priorit√©_conservation'].iloc[0]
                    color = get_conservation_color(conserv_index)

                    st.markdown(f"""
                        <div style='background-color: {color}; padding: 6px 12px; border-radius: 8px; font-size: 20px; display: inline-block;'>
                        <b>Priorit√© de conservatio*:</b> {conserv_index}
                        </div>
                        """, unsafe_allow_html=True)
                    
                    reg_index = match['Indice_priorit√©_r√©glementaire'].iloc[0]
                    color_reg = get_reglementaire_color(reg_index)

                    st.markdown(f"""
                        <div style='background-color: {color_reg};  padding: 6px 12px; border-radius: 8px; font-size: 20px; display: inline-block;'>
                        <b>Priorit√© r√©glementair*:</b> {reg_index}
                        </div>
                        """, unsafe_allow_html=True)

                    st.markdown ("---")
                    st.markdown(f"**Code unique clause :** {match['Code_unique'].iloc[0]}")
                    st.markdown(f"**Condition d'application de la clause :** {match['Condition(s)_application_clause'].iloc[0]}")

                    st.markdown(f"**R√¥le du TFT :** {match['R√¥le_TFT'].iloc[0]}")
                    
                    with st.expander("üìã Libell√© des clauses √† inscrire"):
                        st.write(f"**Libell√© Fiche chantier (TECK) :** {match['Libell√©_fiche_chantier_ONF (TECK)'].iloc[0]}")
                        st.write(f"**Libell√© Fiche d√©signation (DESIGNATION MOBILE) :** {match['Libell√©_fiche_d√©signation_ONF (DESIGNATION MOBILE)'].iloc[0]}")
                        st.write(f"**Libell√© Fiche vente (PRODUCTION BOIS) :** {match['Libell√©_fiche_vente_ONF (PRODUCTION BOIS)'].iloc[0]}")


                    st.markdown ("---")
                    with st.expander("*L√©gende des indices de priorit√©"):
                        st.markdown("""
                        **Indice de priorit√© de conservation** :
                        - `5` : Priorit√© de conservation cruciale
                        - `4` : Priorit√© de conservation majeure
                        - `3` : Priorit√© de conservation forte
                        - `2` : Priorit√© de conservation significative
                        - `1` : Priorit√© de conservation mod√©r√©e

                        **Indice de priorit√© r√©glementaire** :
                        - `4` : Risque r√©glementaire majeur (Esp√®ce r√©glement√©e au niveau europ√©en + national ou r√©gional) si les interventions foresti√®res impactent les sp√©cimens OU les √©l√©ments n√©cessaires au bon fonctionnement de leur cycle biologique (site de reproduction, site de repos, source de nourriture etc.).
                        - `3` : Risque r√©glementaire √©lev√© (Esp√®ce r√©glement√©e au niveau national ou r√©gional) si les interventions foresti√®res impactent les sp√©cimens OU les √©l√©ments n√©cessaires au bon fonctionnement de leur cycle biologique (site de reproduction, site de repos, source de nourriture etc.).
                        - `2` : Risque r√©glementaire uniquement si les interventions foresti√®res impactent les sp√©cimens.
                        - `1` : La gestion foresti√®re courante de l'ONF suffit √† conserver le bon √©tat des populations de l'esp√®ce √† l'√©chelle du massif.
                        - `0` : Esp√®ce non prot√©g√©e.
                        """)

                    # Dictionnaire de correspondance
                    respo_dict = {
                            1: "Faible",
                            2: "Mod√©r√©e",
                            3: "Significative",
                            4: "Forte",
                            5: "Majeure"
                        }

                    # R√©cup√©rer la valeur brute dans le tableau
                    valeur_respo = match['Respo_reg'].iloc[0]

                    # Traduire en texte si possible
                    texte_respo = respo_dict.get(valeur_respo, "Non Renseign√©")

                    with st.expander("üìò D√©tail des statuts"):
                        st.write(f"**Liste rouge r√©gionale :** {traduire_statut(match['LR_reg'].iloc[0])}")
                        st.write(f"**Liste rouge nationale :** {traduire_statut(match['LR_nat'].iloc[0])}")
                        st.write(f"**Responsabilit√© r√©gionale :** {texte_respo}")
                        st.write(f"**Directives europ√©ennes :** {traduire_statut(match['Directives_euro'].iloc[0])}")
                        st.write(f"**Plan d'action :** {traduire_statut(match['Plan_action'].iloc[0])}")
                        
                        # R√©cup√©ration des 3 colonnes concern√©es
                        apn = match['Arr√™t√©_protection_nationale'].iloc[0]
                        ap_bn = match['Arr√™t√©_protection_BN'].iloc[0]
                        ap_hn = match['Arr√™t√©_protection_HN'].iloc[0]

                        # On filtre uniquement les valeurs diff√©rentes de "N.C."
                        valeurs_protection = [apn, ap_bn, ap_hn]
                        valeurs_non_nc = [v for v in valeurs_protection if str(v).strip() != "N.C."]

                        # Affichage
                        if valeurs_non_nc:
                            st.write(f"**Arr√™t√© de protection :** {', '.join(valeurs_non_nc)}")
                        else:
                            st.write("**Arr√™t√© de protection :** Non Concern√©")
                        st.write(f"**Article de l'arr√™t√© :** {traduire_statut(match['Article_arr√™t√©'].iloc[0])}")
                    
                    with st.expander("‚ûï Pour aller plus loin"):
                        contenu = match['Conseils_gestion'].iloc[0]
                        if pd.notna(contenu) and contenu != "":
                            st.markdown(f"{contenu}")
                        else:
                            st.markdown("")

            else:
                st.info("‚ùå Il n'existe pas de prescription environnementale pour cette esp√®ce.")
        
    
    # --------------------- PAGE REFERENTIEL ---------------------

    elif page == "R√©f√©rentiel" :
        st.markdown("### Tableau r√©f√©rentiel des statuts des esp√®ces remarquables pour l'ONF Normandie")
        st.markdown(
        '[‚û°Ô∏è Voir le tableau Excel en ligne](https://officenationaldesforets-my.sharepoint.com/personal/matteo_kressmann_onf_fr/_layouts/15/Doc.aspx?sourcedoc={719dad7b-de23-4680-8262-4083c17d5603}&action=embedview)'
        )
        iframe_code = """<iframe width="2000" height="1000" frameborder="0" scrolling="no" src="https://officenationaldesforets-my.sharepoint.com/personal/matteo_kressmann_onf_fr/_layouts/15/Doc.aspx?sourcedoc={719dad7b-de23-4680-8262-4083c17d5603}&action=embedview&wdAllowInteractivity=False&wdHideGridlines=True&wdHideHeaders=True&wdDownloadButton=True&wdInConfigurator=True&wdInConfigurator=True"></iframe>"""
        html(iframe_code, height=600)
